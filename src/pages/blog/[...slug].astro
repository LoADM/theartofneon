---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  // You only need to return the params for each page. No props needed.
  return posts.map((post) => ({
    params: { slug: post.slug },
  }));
}

// Get the slug from the URL parameters. This is the most reliable way.
const { slug } = Astro.params;
const post = await getEntry('blog', slug);

// If no post is found with the given slug, redirect to a 404 page.
if (!post) {
  return Astro.redirect('/404');
}

const { Content } = await post.render();

// Get all posts for related articles
const allPosts = await getCollection('blog');
// Use 'slug' here instead of 'postSlug'
const otherPosts = allPosts.filter(p => p.slug !== slug);

// Find related articles based on common tags
const relatedPosts = otherPosts
  .map(otherPost => {
    const commonTags = post.data.tags.filter(tag =>
      otherPost.data.tags.includes(tag)
    );
    return {
      post: otherPost,
      commonTagsCount: commonTags.length
    };
  })
  .sort((a, b) => b.commonTagsCount - a.commonTagsCount)
  .slice(0, 3)
  .map(item => item.post);

// If we don't have enough related posts, fill with recent posts
const recentPosts = otherPosts
  .sort((a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime())
  .filter(p => !relatedPosts.find(rp => rp.slug === p.slug))
  .slice(0, 3 - relatedPosts.length);

const finalRelatedPosts = [...relatedPosts, ...recentPosts].slice(0, 3);

// Get all products for related products
const allProducts = await getCollection('products');

// Find related products based on common tags
const relatedProducts = allProducts
  .map(product => {
    const commonTags = post.data.tags.filter(tag =>
      product.data.tags.some(productTag => 
        productTag.toLowerCase() === tag.toLowerCase()
      )
    );
    return {
      product,
      commonTagsCount: commonTags.length
    };
  })
  .filter(item => item.commonTagsCount > 0)
  .sort((a, b) => b.commonTagsCount - a.commonTagsCount)
  .slice(0, 3)
  .map(item => item.product);
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image}
  type="article"
>
  <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <nav class="mb-8">
      <a href="/" class="inline-flex items-center text-neon-cyan hover:text-neon-pink transition-colors duration-300">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to All Posts
      </a>
    </nav>

    <header class="mb-12">
      <div class="flex flex-wrap gap-2 mb-4">
        {post.data.tags.map((tag) => (
          <span class="text-xs bg-neon-green/20 text-neon-green px-3 py-1 rounded-full">
            {tag}
          </span>
        ))}
      </div>
      <h1 class="text-4xl md:text-5xl font-display font-bold text-white mb-6 leading-tight">
        {post.data.title}
      </h1>
      <div class="flex items-center text-gray-400 text-sm mb-8">
        <span>By {post.data.author}</span>
        <span class="mx-2">â€¢</span>
        <time datetime={post.data.publishDate.toISOString()}>
          {post.data.publishDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
      </div>
      <div class="relative rounded-lg overflow-hidden mb-8">
        <img
          src={post.data.image}
          alt={post.data.imageAlt}
          class="w-full h-64 md:h-96 object-cover"
          loading="eager"
        />
        <div class="absolute inset-0 bg-gradient-to-t from-dark/20 to-transparent"></div>
      </div>
    </header>

    <section class="prose prose-lg prose-invert max-w-none">
      <Content />
    </section>

    {finalRelatedPosts.length > 0 && (
      <section class="mt-16 pt-8 border-t border-neon-cyan/20">
        <h2 class="text-3xl font-display font-bold text-white mb-8 text-center">
          Related <span class="text-neon-cyan">Articles</span>
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {finalRelatedPosts.map((relatedPost) => (
            <a href={`/blog/${relatedPost.slug}`} class="block">
              <article>
                <img
                  src={relatedPost.data.image}
                  alt={relatedPost.data.imageAlt}
                  class="w-full h-48 object-cover"
                  loading="lazy"
                />
                <div class="p-4">
                  <h3 class="text-lg font-bold text-white mb-2">{relatedPost.data.title}</h3>
                  <p class="text-gray-300 text-sm">{relatedPost.data.description}</p>
                </div>
              </article>
            </a>
          ))}
        </div>
      </section>
    )}

    {relatedProducts.length > 0 && (
      <section class="mt-16 pt-8 border-t border-neon-pink/20">
        <h2 class="text-3xl font-display font-bold text-white mb-8 text-center">
          Related <span class="text-neon-pink">Products</span>
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {relatedProducts.map((product) => (
            <div class="product-card bg-dark-secondary/50 rounded-lg overflow-hidden border border-neon-pink/20 hover:border-neon-pink/40 transition-all duration-300 group">
              <a href={product.data.url} target="_blank" rel="noopener noreferrer" class="block">
                <div class="relative">
                  <img
                    src={product.data.image}
                    alt={product.data.title}
                    class="w-full h-48 object-cover transition-transform duration-500 group-hover:scale-105"
                    loading="lazy"
                  />
                  <div class="absolute inset-0 bg-gradient-to-t from-black via-black/20 to-transparent opacity-60"></div>
                  <div class="absolute inset-0 bg-neon-pink/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                </div>
                <div class="p-4">
                  <h3 class="text-lg font-display font-bold text-white mb-2 group-hover:text-neon-pink transition-colors duration-300">
                    {product.data.title}
                  </h3>
                  <p class="text-gray-300 text-sm leading-relaxed group-hover:text-gray-200 transition-colors duration-300">
                    {product.data.description}
                  </p>
                  <div class="mt-3 flex items-center justify-between">
                    <span class="text-xs text-neon-pink font-semibold">View Product</span>
                    <svg class="w-4 h-4 text-neon-pink" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                    </svg>
                  </div>
                </div>
              </a>
            </div>
          ))}
        </div>
      </section>
    )}

    <footer class="mt-12 pt-8 border-t border-neon-cyan/20">
      <div class="text-center">
        <a href="/" class="neon-button">Read More Articles</a>
      </div>
    </footer>
  </article>
</Layout>

<style>
  .neon-button {
    @apply inline-block bg-gradient-to-r from-neon-pink to-neon-cyan text-white font-semibold px-8 py-3 rounded-lg;
  }
  
  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 
      0 20px 40px rgba(255, 0, 255, 0.15),
      0 0 0 1px rgba(255, 0, 255, 0.2),
      0 0 20px rgba(255, 0, 255, 0.1);
  }
  
  .prose { @apply text-gray-300; }
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 { @apply text-white font-display; }
</style>