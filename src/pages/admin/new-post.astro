---
import Layout from '../../layouts/Layout.astro';
---

<Layout 
  title="Add New Post - Admin Dashboard"
  description="Create a new blog post"
>
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
      <a href="/admin" class="inline-flex items-center text-neon-cyan hover:text-neon-pink transition-colors duration-300 mb-6">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Dashboard
      </a>
      
      <h1 class="text-4xl font-display font-bold text-white mb-4">
        Add New <span class="text-neon-green">Post</span>
      </h1>
      <p class="text-gray-300">Create a new blog post about neon signs</p>
    </div>

    <div class="bg-dark-secondary/50 rounded-lg p-8 border border-neon-cyan/20">
      <form id="newPostForm" class="space-y-6">
        <div>
          <label for="title" class="block text-sm font-medium text-gray-300 mb-2">
            Post Title *
          </label>
          <input
            type="text"
            id="title"
            name="title"
            required
            class="w-full px-4 py-3 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-neon-cyan transition-colors duration-300"
            placeholder="Enter post title"
          />
        </div>

        <div>
          <label for="description" class="block text-sm font-medium text-gray-300 mb-2">
            Description *
          </label>
          <textarea
            id="description"
            name="description"
            rows="3"
            required
            class="w-full px-4 py-3 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-neon-cyan transition-colors duration-300"
            placeholder="Brief description for SEO and social media"
          ></textarea>
        </div>

        <div>
          <label for="image" class="block text-sm font-medium text-gray-300 mb-2">
            Featured Image URL *
          </label>
          <input
            type="url"
            id="image"
            name="image"
            required
            class="w-full px-4 py-3 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-neon-cyan transition-colors duration-300"
            placeholder="https://example.com/image.jpg"
          />
        </div>

        <div>
          <label for="imageAlt" class="block text-sm font-medium text-gray-300 mb-2">
            Image Alt Text *
          </label>
          <input
            type="text"
            id="imageAlt"
            name="imageAlt"
            required
            class="w-full px-4 py-3 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-neon-cyan transition-colors duration-300"
            placeholder="Describe the image for accessibility"
          />
        </div>

        <div>
          <label for="tags" class="block text-sm font-medium text-gray-300 mb-2">
            Tags (comma-separated)
          </label>
          <input
            type="text"
            id="tags"
            name="tags"
            class="w-full px-4 py-3 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-neon-cyan transition-colors duration-300"
            placeholder="neon, art, history, diy"
          />
        </div>

        <div>
          <label for="author" class="block text-sm font-medium text-gray-300 mb-2">
            Author
          </label>
          <input
            type="text"
            id="author"
            name="author"
            value="Admin"
            class="w-full px-4 py-3 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-neon-cyan transition-colors duration-300"
          />
        </div>

        <div>
          <label for="content" class="block text-sm font-medium text-gray-300 mb-2">
            Content *
          </label>
          <div class="mb-4">
            <div class="flex flex-wrap gap-2 mb-2">
              <button type="button" class="format-btn" data-format="bold">
                <strong>B</strong>
              </button>
              <button type="button" class="format-btn" data-format="italic">
                <em>I</em>
              </button>
              <button type="button" class="format-btn" data-format="h2">
                H2
              </button>
              <button type="button" class="format-btn" data-format="h3">
                H3
              </button>
              <button type="button" class="format-btn" data-format="link">
                Link
              </button>
              <button type="button" class="format-btn" data-format="ul">
                List
              </button>
            </div>
          </div>
          <textarea
            id="content"
            name="content"
            rows="20"
            required
            class="w-full px-4 py-3 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-neon-cyan transition-colors duration-300 font-mono"
            placeholder="Write your post content in Markdown format..."
          ></textarea>
        </div>

        <div class="flex justify-end space-x-4">
          <button
            type="button"
            class="px-6 py-3 border border-gray-600 text-gray-300 rounded-lg hover:bg-gray-700 transition-colors duration-300"
          >
            Preview
          </button>
          <button
            type="submit"
            class="px-6 py-3 bg-gradient-to-r from-neon-pink to-neon-cyan text-white font-semibold rounded-lg hover:shadow-lg transition-all duration-300"
          >
            Publish Post
          </button>
        </div>
      </form>

      <div id="success-message" class="mt-6 p-4 bg-neon-green/20 border border-neon-green/40 rounded-lg text-neon-green hidden">
          <p class="text-sm">Your post has been saved and will be available after the next build.</p>
        </div>

        <div id="error-message" class="mt-6 p-4 bg-red-500/20 border border-red-500/40 rounded-lg text-red-400 hidden">
          <p class="font-semibold">Error creating post!</p>
          <p class="text-sm" id="error-details">Please try again.</p>
        <p class="text-sm">Your post has been published and is now live on the blog.</p>
      </div>
    </div>
  </div>
</Layout>

<style>
  .format-btn {
    @apply px-3 py-1 bg-dark-secondary border border-gray-600 text-gray-300 rounded hover:bg-gray-700 hover:text-white transition-colors duration-300;
  }
</style>

<script>
  // Check authentication
  if (sessionStorage.getItem('adminAuth') !== 'true') {
    window.location.href = '/admin';
  }

  // Simple rich text formatting
  const formatBtns = document.querySelectorAll('.format-btn');
  const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;

  formatBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const format = btn.getAttribute('data-format');
      const start = contentTextarea.selectionStart;
      const end = contentTextarea.selectionEnd;
      const selectedText = contentTextarea.value.substring(start, end);
      
      let replacement = '';
      
      switch (format) {
        case 'bold':
          replacement = `**${selectedText}**`;
          break;
        case 'italic':
          replacement = `*${selectedText}*`;
          break;
        case 'h2':
          replacement = `\n## ${selectedText}\n`;
          break;
        case 'h3':
          replacement = `\n### ${selectedText}\n`;
          break;
        case 'link':
          const url = prompt('Enter URL:');
          replacement = `[${selectedText}](${url || '#'})`;
          break;
        case 'ul':
          replacement = `\n- ${selectedText}\n`;
          break;
        default:
          replacement = selectedText;
      }
      
      contentTextarea.value = contentTextarea.value.substring(0, start) + replacement + contentTextarea.value.substring(end);
      contentTextarea.focus();
    });
  });

  // Form submission
  document.getElementById('newPostForm')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const postData = {
      title: formData.get('title'),
      description: formData.get('description'),
      image: formData.get('image'),
      imageAlt: formData.get('imageAlt'),
      tags: formData.get('tags'),
      author: formData.get('author'),
      content: formData.get('content')
    };

    try {
      const response = await fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(postData)
      });

      const result = await response.json();

      if (result.success) {
        // Show success message
        const successMessage = document.getElementById('success-message');
        const errorMessage = document.getElementById('error-message');
        
        if (successMessage && errorMessage) {
          successMessage.classList.remove('hidden');
          errorMessage.classList.add('hidden');
          
          // Reset form
          (e.target as HTMLFormElement).reset();
          
          // Scroll to success message
          successMessage.scrollIntoView({ behavior: 'smooth' });
          
          // Hide success message after 5 seconds
          setTimeout(() => {
            successMessage.classList.add('hidden');
          }, 5000);
        }
      } else {
        // Show error message
        const successMessage = document.getElementById('success-message');
        const errorMessage = document.getElementById('error-message');
        const errorDetails = document.getElementById('error-details');
        
        if (successMessage && errorMessage && errorDetails) {
          successMessage.classList.add('hidden');
          errorMessage.classList.remove('hidden');
          errorDetails.textContent = result.error || 'Please try again.';
          
          // Scroll to error message
          errorMessage.scrollIntoView({ behavior: 'smooth' });
        }
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      
      // Show error message
    const successMessage = document.getElementById('success-message');
      const errorMessage = document.getElementById('error-message');
      const errorDetails = document.getElementById('error-details');
      
      if (successMessage && errorMessage && errorDetails) {
        successMessage.classList.add('hidden');
        errorMessage.classList.remove('hidden');
        errorDetails.textContent = 'Network error. Please check your connection and try again.';
        
        // Scroll to error message
        errorMessage.scrollIntoView({ behavior: 'smooth' });
    }
    }
  });
</script>